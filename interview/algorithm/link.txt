1.判断2个一个链表是否有环
关键点：快指针和慢指针相遇
IsLoop( Node *head )
{
    Node *fast = head->next;
    Node *slow = head->next;
    while(fast->next && slow->next)
    {
        fast = fast->next->next;
        slow = slow->next;
        if (fast == slow)
        {
    	    return true;
        }     
    }
    return false;
}


2.单链表反转
关键点：3个指针，循环判断中间那根。
 ListNode* ReverseList(ListNode* pHead)
 {
     ListNode* pReversedHead = NULL;
     ListNode* pNode = pHead;
     ListNode* pPrev = NULL;
     while(pNode != NULL)
     {
         ListNode* pNext = pNode->m_pNext;
 
        if(pNext == NULL)
             pReversedHead = pNode;
 
         pNode->m_pNext = pPrev;
 
         pPrev = pNode;
         pNode = pNext;
     }
 
     return pReversedHead;
 }


3.判断2个链表是否相交。
注意这里的相交不是相交一个节点，而是最后一段完全共用。
因此先出尾节点，如果尾节点相同，则相交。求尾节点过程中求出2个链表的长度，然后遍历第2次，长链表先走m-n步，m是长链表的长度，n是短链表的长度。


4.合并有序单链表
Node* merge( Node *head1; Node *head2 )
{
    Node *p1 = head1->next;
    Node *p2 = head2->next;
    Node *p = new Node;
    Node *head = p;
    while( p1 != NULL && p2 != NULL)
    {
       while(p1->data <= p2->data)
       {     
           p->next = p1;
           p = p1;
           p1 = p1->next;
       }
       Node *temp = p2;
       p2 = p1;
       p1 = temp;
    }
    if (p1)
    {
       p->next = p1;
    }
    else if (p2)
    {
       p->next = p2;
    }
    return head;
}

